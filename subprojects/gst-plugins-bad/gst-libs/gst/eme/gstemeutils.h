/* GStreamer
 *
 * SPDX-License-Identifier: LGPL-2.1
 *
 * Copyright (C) 2022, 2023 Collabora Ltd.
 *   @author Jordan Yelloz <jordan.yelloz@collabora.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

#pragma once

#include <gst/gst.h>
#include <gst/eme/eme-prelude.h>

#include <gst/eme/eme.h>

G_BEGIN_DECLS

/**
 * GstEmeMediaKeyMessageType:
 * @GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_REQUEST: The session requests a new
 * license
 * @GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_RENEWAL: The session wants to renew
 * an existing license
 * @GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_RELEASE: The session wants to release
 * an existing license
 * @GST_EME_MEDIA_KEY_MESSAGE_TYPE_INDIVIDUALIZATION_REQUEST: The message is
 * associated with the individualization process
 * @GST_EME_MEDIA_KEY_MESSAGE_TYPE_UNKNOWN: The message is not one of the
 * expected message types generated by a session
 *
 * Types of messages sent by the #GstMediaKeySession::on-message signal
 *
 * [Specification](https://www.w3.org/TR/encrypted-media/#dom-mediakeymessagetype)
 *
 * Since: 1.24
 */
typedef enum {
  GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_REQUEST,
  GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_RENEWAL,
  GST_EME_MEDIA_KEY_MESSAGE_TYPE_LICENSE_RELEASE,
  GST_EME_MEDIA_KEY_MESSAGE_TYPE_INDIVIDUALIZATION_REQUEST,
  GST_EME_MEDIA_KEY_MESSAGE_TYPE_UNKNOWN = -1,
} GstEmeMediaKeyMessageType;

/**
 * GstEmeMessageType:
 * @GST_EME_MESSAGE_TYPE_GENERATE_REQUEST: Used internally by implementors of
 * #GstMediaKeySession
 * @GST_EME_MESSAGE_TYPE_LOAD: Used internally by implementors of
 * #GstMediaKeySession
 * @GST_EME_MESSAGE_TYPE_UPDATE: Used internally by implementors of
 * #GstMediaKeySession
 * @GST_EME_MESSAGE_TYPE_REMOVE: Used internally by implementors of
 * #GstMediaKeySession
 * @GST_EME_MESSAGE_TYPE_CLOSE: Used internally by implementors of
 * #GstMediaKeySession
 * @GST_EME_MESSAGE_TYPE_EME_MESSAGE: This message will be sent by the
 * @GstMediaKeySession when it needs to request, renew, or release a license.
 * The application is responsible for delegating this request to the appropriate
 * license authority.
 * @GST_EME_MESSAGE_TYPE_EME_ENCRYPTED: This message will be sent by a decryptor
 * element when it encounters initialization data inside encrypted media.
 * Applications should react to this message by setting up a
 * @GstMediaKeySystemAccess, @GstMediaKeys, and @GstMediaKeySession if this
 * hasn't been performed yet for the supplied initialization data.
 * @GST_EME_MESSAGE_TYPE_UNKNOWN: This message is not a valid message used by
 * the GST EME API.
 *
 * Since: 1.24
 */
typedef enum {
  GST_EME_MESSAGE_TYPE_GENERATE_REQUEST,
  GST_EME_MESSAGE_TYPE_LOAD,
  GST_EME_MESSAGE_TYPE_UPDATE,
  GST_EME_MESSAGE_TYPE_REMOVE,
  GST_EME_MESSAGE_TYPE_CLOSE,

  GST_EME_MESSAGE_TYPE_EME_ENCRYPTED,

  GST_EME_MESSAGE_TYPE_UNKNOWN = -1,
} GstEmeMessageType;

GST_EME_API
GstContext *gst_eme_context_new_protection_system_id (const gchar * uuid);

GST_EME_API
GstContext *gst_eme_context_new_media_keys (GstMediaKeys * media_keys);

GST_EME_API
gboolean gst_eme_context_get_media_keys (GstContext * context,
    GstMediaKeys ** media_keys);

GST_EME_API
GstStructure *gst_eme_response_ok (void);

GST_EME_API
GstStructure *gst_eme_response_type_error (void);

GST_EME_API
GstStructure *gst_eme_response_invalid_state_error (void);

GST_EME_API
GstStructure *gst_eme_response_system_access (
    GstMediaKeySystemAccess * system_access);

GST_EME_API
GstStructure *gst_eme_response_media_keys (GstMediaKeys * keys);

GST_EME_API
GstStructure *gst_eme_response_init_data (GstBuffer * init_data);

GST_EME_API
GstMediaKeySystemAccess *gst_eme_resolve_system_access (GstPromise * promise);

GST_EME_API
GstMediaKeys *gst_eme_resolve_media_keys (GstPromise * promise);

GST_EME_API
GstBuffer *gst_eme_resolve_init_data (GstPromise * promise);

GST_EME_API
GstEmeMediaKeyMessageType gst_eme_media_key_message_get_type (
    GstMessage * message);

GST_EME_API
GstEmeMessageType gst_eme_message_get_type (GstMessage * message);

GST_EME_API
GstMessage *gst_message_new_eme_generate_request (GstObject *src,
    const gchar * init_data_type, GstBuffer * init_data, GstPromise * promise);

GST_EME_API
gboolean gst_message_parse_eme_generate_request (GstMessage * message,
    gchar ** init_data_type, GstBuffer ** init_data, GstPromise ** promise);

GST_EME_API
GstMessage *gst_message_new_eme_load (GstObject * src, const gchar * session_id,
    GstPromise * promise);

GST_EME_API
gboolean gst_message_parse_eme_load (GstMessage * message, gchar ** session_id,
    GstPromise ** promise);

GST_EME_API
GstMessage *gst_message_new_eme_remove (GstObject * src, GstPromise * promise);

GST_EME_API
gboolean gst_message_parse_eme_remove (GstMessage * message,
    GstPromise ** promise);

GST_EME_API
GstMessage *gst_message_new_eme_close (GstObject * src, GstPromise * promise);

GST_EME_API
gboolean gst_message_parse_eme_close (GstMessage * message,
    GstPromise ** promise);

GST_EME_API
GstMessage *gst_message_new_eme_update (GstObject * src, GstBuffer * response,
    GstPromise * promise);

GST_EME_API
gboolean gst_message_parse_eme_update (GstMessage * message,
    GstBuffer ** response, GstPromise ** promise);

GST_EME_API
GstMessage *gst_message_new_eme_license_request (GstObject * src,
    GstBuffer * payload);

GST_EME_API
gboolean gst_message_parse_eme_license_request (GstMessage * message,
    GstBuffer ** payload);

GST_EME_API
GstMessage *gst_message_new_eme_license_renewal (GstObject * src,
    GstBuffer * payload);

GST_EME_API
gboolean gst_message_parse_eme_license_renewal (GstMessage * message,
    GstBuffer ** payload);

GST_EME_API
GstMessage *gst_message_new_eme_license_release (GstObject * src,
    GstBuffer * payload);

GST_EME_API
gboolean gst_message_parse_eme_license_release (GstMessage * message,
    GstBuffer ** payload);

GST_EME_API
GstMessage *gst_message_new_eme_individualization_request (GstObject * src,
    GstBuffer * payload);

GST_EME_API
gboolean gst_message_parse_eme_individualization_request (GstMessage * message,
    GstBuffer ** payload);

GST_EME_API
GstMessage *gst_message_new_eme_encrypted (GstElement * src,
    const gchar * init_data_type, GstBuffer * init_data);

GST_EME_API
gboolean gst_message_parse_eme_encrypted (GstMessage * message,
    gchar ** init_data_type, GstBuffer ** init_data);

GST_EME_API
GstMessage *gst_message_new_eme_encrypted_full (GstElement * src,
    const gchar * init_data_type, GstBuffer * init_data,
    const gchar * init_data_origin, GstBuffer * raw_init_data);

GST_EME_API
GstMessage *gst_message_new_eme_waiting_for_key (GstObject * src,
    GstBuffer * key_id, GstPromise * promise);

GST_EME_API
gboolean gst_message_parse_eme_waiting_for_key (GstMessage * message,
    GstBuffer ** key_id, GstPromise ** promise);

GST_EME_API
GstMessage *gst_message_new_eme_have_key (GstObject * src, GstBuffer * key_id);

GST_EME_API
gboolean gst_message_parse_eme_have_key (GstMessage * message,
    GstBuffer ** key_id);

GST_EME_API
gboolean gst_eme_parse_dash_content_protection_block (GstBuffer * buffer,
    gchar ** scheme_uuid, gchar *** license_acquisition_urls,
    gchar *** authorization_urls, GstBuffer ** init_data);

GST_EME_API
gboolean gst_eme_parse_dash_protection_message (GstMessage * message,
    gchar *** license_acquisition_urls, gchar *** authorization_urls);

G_END_DECLS
